{"version":3,"sources":["common/enum/pointsPackage.enum.ts","pages/PointsPackageDetails/index.tsx"],"names":["PointsPackageType","PointsPackageDetails","useState","loading","setIsLoading","useSelector","state","userDetails","isLoading","useWeb3React","library","account","enqueueSnackbar","useSnackbar","useLocation","navigate","useNavigate","selectedPoints","subscription","pointsPackageName","PayWithCrypto","Client","post","apiRoutes","cryptoTotalCost","id","data","maticPrice","toAddress","provider","request","method","params","from","to","value","signature","cryptoTransfer","txId","routes","viewBalance","Errors","appError","variant","persist","preventDuplicate","code","HttpStatus","CRYPTO_ERR0R_CODE","message","className","totalAmount","Fiat","onClick","confirmPurchases","color","size","fullWidth","React","memo"],"mappings":"gHAAO,IAAKA,EAAZ,kC,SAAYA,K,YAAAA,E,gBAAAA,E,WAAAA,M,sOCwCNC,EAAuB,WAC3B,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEA,EAAwBF,oBAAkB,GAA1C,mBAEA,GAFA,UAEmCG,aAAY,SAACC,GAAD,cAAyBA,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAOC,WAAhC,KAAvCC,EAAR,EAAQA,UAER,EAA6BC,cAArBC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAETC,EAAoBC,cAApBD,gBAEAN,EAAUQ,cAAVR,MAEFS,EAAWC,cAEjB,EAA4DV,EAApDW,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,aAAcC,EAAtC,EAAsCA,kBAEhCC,EAAa,iDAAG,mHACpBhB,GAAa,GADO,SAEGiB,IAAOC,KAAKC,IAAUC,gBAAiB,CAC5DC,GAAIR,EAAeQ,KAHD,2BAEZC,EAFY,EAEZA,YAFY,IAMhBA,MAAMA,KANU,sBASdA,EADFA,KAAQC,EARQ,EAQRA,WAAYC,EARJ,EAQIA,UARJ,UAWZjB,EAXY,yCAYUD,QAZV,IAYUA,GAZV,UAYUA,EAASmB,gBAZnB,aAYU,EAAmBC,QAAQ,CACjDC,OAAQ,sBACRC,OAAQ,CACN,CACEC,KAAMtB,EACNuB,GAAIN,EACJO,MAAOR,MAlBC,aAYRS,EAZQ,0CAuBWf,IAAOC,KAAKC,IAAUc,eAAgB,CAC3DZ,GAAIR,EAAeQ,GACnBa,KAAMF,IAzBI,mBAuBJV,KAICA,MACPX,EAASwB,IAAOC,aA5BN,gCAgCd5B,EAAgB6B,IAAOC,SAAU,CAC/BC,QAAS,QACTC,SAAS,EACTC,kBAAkB,IAnCN,0DAuChBzC,GAAa,GACT,KAAI0C,OAASC,IAAWC,kBAC1BpC,EAAgB,KAAIqC,QAAS,CAC3BN,QAAS,QACTC,SAAS,EACTC,kBAAkB,IAGpBjC,EAAgB6B,IAAOC,SAAU,CAC/BC,QAAS,QACTC,SAAS,EACTC,kBAAkB,IAlDN,QAuDpBzC,GAAa,GAvDO,0DAAH,qDA0DnB,OACE,qCACE,cAAC,IAAD,CAAWD,QAASK,GAAwBL,IAC5C,qBAAK+C,UAAU,+BAAf,SACE,sBAAKA,UAAU,2CAAf,UACE,gCACE,oBAAIA,UAAU,wDAAd,kBACA,cAAC,IAAD,CAAYjC,eAAgBA,EAAgBC,aAAcA,IAC1D,qBAAKgC,UAAU,QAAf,SACE,sBAAKA,UAAU,oEAAf,UACE,mBAAGA,UAAU,sCAAb,mBACA,oBAAGA,UAAU,4CAAb,cACIjC,EAAekC,oBAKvB,cAAC,IAAD,OAEF,qBAAKD,UAAU,QAAf,SACG/B,IAAsBnB,IAAkBoD,KACvC,cAAC,IAAD,CACEC,QAAS,kBACPtC,EAASwB,IAAOe,iBAAkB,CAChChD,MAAO,CACLW,iBACAC,iBAJG,EAQTyB,QAAQ,YACRY,MAAM,UACNC,KAAK,QACLC,WAAS,EAZX,iCAgBA,cAAC,IAAD,CACEJ,QAASjC,EACTuB,QAAQ,YACRY,MAAM,UACNC,KAAK,QACLC,WAAS,EALX,sCAcb,EAEcC,cAAMC,KAAK1D,E","file":"static/js/9.4be91cb9.chunk.js","sourcesContent":["export enum PointsPackageType {\n  Fiat = 'fiat',\n  crypto = 'crypto',\n  Iap = 'iap'\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSnackbar } from 'notistack';\n\n//Material Design\nimport { Button, Dialog, DialogContent } from '@mui/material';\n\nimport { AppLoader, CartHeader, PaymentTerms } from '../../components';\nimport { PoinstPackageList } from '../../common/interface/pointsPackage.interface';\nimport { UserDetails } from '../../common/interface/userDetails.interface';\nimport routes from '../../constants/routes';\nimport { PointsPackageType } from '../../common/enum/pointsPackage.enum';\nimport { Client } from '../../config';\n\n//styles\nimport './style.scss';\nimport { apiRoutes } from '../../constants/apiRoutes';\nimport { Errors } from '../../constants/errors';\nimport { HttpStatus } from '../../common/enum/statusCode.enum';\n\ninterface loggedInUser {\n  userDetails: {\n    userDetails: UserDetails;\n    isLoading: boolean;\n  };\n}\n\ninterface userDetails {\n  userDetails: UserDetails;\n  isLoading: boolean;\n}\n\ninterface Istate {\n  selectedPoints: PoinstPackageList;\n  subscription: boolean;\n  pointsPackageName: PointsPackageType;\n}\n\nconst PointsPackageDetails = () => {\n  const [loading, setIsLoading] = useState(false);\n\n  const [open, setOpen] = useState<boolean>(false);\n\n  const { isLoading }: userDetails = useSelector((state: loggedInUser) => state?.userDetails);\n\n  const { library, account } = useWeb3React();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { state } = useLocation();\n\n  const navigate = useNavigate();\n\n  const { selectedPoints, subscription, pointsPackageName } = state as Istate;\n\n  const PayWithCrypto = async () => {\n    setIsLoading(true);\n    const { data } = await Client.post(apiRoutes.cryptoTotalCost, {\n      id: selectedPoints.id\n    });\n\n    if (data?.data) {\n      const {\n        data: { maticPrice, toAddress }\n      } = data;\n      try {\n        if (account) {\n          const signature = await library?.provider?.request({\n            method: 'eth_sendTransaction',\n            params: [\n              {\n                from: account,\n                to: toAddress,\n                value: maticPrice\n              }\n            ]\n          });\n          if (signature) {\n            const { data } = await Client.post(apiRoutes.cryptoTransfer, {\n              id: selectedPoints.id,\n              txId: signature\n            });\n            if (data.data) {\n              navigate(routes.viewBalance);\n            }\n          }\n        } else {\n          enqueueSnackbar(Errors.appError, {\n            variant: 'error',\n            persist: false,\n            preventDuplicate: true\n          });\n        }\n      } catch (err: any) {\n        setIsLoading(false);\n        if (err.code === HttpStatus.CRYPTO_ERR0R_CODE) {\n          enqueueSnackbar(err.message, {\n            variant: 'error',\n            persist: false,\n            preventDuplicate: true\n          });\n        } else {\n          enqueueSnackbar(Errors.appError, {\n            variant: 'error',\n            persist: false,\n            preventDuplicate: true\n          });\n        }\n      }\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <>\n      <AppLoader loading={isLoading ? isLoading : loading} />\n      <div className=\"my-subscription-content p-24\">\n        <div className=\"d-flex flex-column justify-between h-100\">\n          <div>\n            <h3 className=\"f-18 f-w-500 l-h-normal txt-primary text-center mb-24\">Cart</h3>\n            <CartHeader selectedPoints={selectedPoints} subscription={subscription} />\n            <div className=\"my-20\">\n              <div className=\"d-flex justify-between py-12 border-top-light border-bottom-light\">\n                <p className=\"f-16 f-w-600 l-h-normal txt-primary\">Total</p>\n                <p className=\"f-16 f-w-400 l-h-normal txt-color-primary\">\n                  ${selectedPoints.totalAmount}\n                </p>\n              </div>\n            </div>\n\n            <PaymentTerms />\n          </div>\n          <div className=\"pb-24\">\n            {pointsPackageName === PointsPackageType.Fiat ? (\n              <Button\n                onClick={() =>\n                  navigate(routes.confirmPurchases, {\n                    state: {\n                      selectedPoints,\n                      subscription\n                    }\n                  })\n                }\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                fullWidth>\n                Add Payment Details\n              </Button>\n            ) : (\n              <Button\n                onClick={PayWithCrypto}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                fullWidth>\n                Pay With Crypto\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(PointsPackageDetails);\n"],"sourceRoot":""}