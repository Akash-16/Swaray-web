{"version":3,"sources":["pages/VerifyOTPScreen/index.tsx"],"names":["VerifyOtpScreen","useState","otp","setOtp","isLoading","setIsLoading","verifyOtp","setverifyOtp","deviceId","useDeviceId","state","useLocation","enqueueSnackbar","useSnackbar","navigate","useNavigate","recaptchaDetails","useSelector","recaptchaVerifier","sendOtp","reCaptchaVerifier","RecaptchaVerifier","size","app","phoneNumber","signInWithPhoneNumber","getResult","confirmOtp","confirm","verified","isForgotPasswordPage","Client","patch","apiRoutes","verifyUser","userId","firebaseUid","user","uid","isVerified","data","routes","trustDevicePage","Errors","appError","preventDuplicate","persist","variant","forgotPassword","newPassword","className","fullWidth","value","onChange","numInputs","containerStyle","justifyContent","inputStyle","width","height","backgroundColor","borderLeft","borderRight","borderTop","borderBottom","color","fontSize","fontWeight","outline","separator","style","marginLeft","id","onClick","loading","React","memo"],"mappings":"mSA6BA,SAASA,IACP,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAEA,EAAkCF,oBAAkB,GAApD,mBAAOG,EAAP,KAAkBC,EAAlB,KAEA,EAAkCJ,qBAAlC,mBAAOK,EAAP,KAAkBC,EAAlB,KAIMC,EAAWC,cAETC,EAAUC,cAAVD,MAEAE,EAAoBC,cAApBD,gBAEFE,EAAWC,cAEXC,EAAuCC,aAC3C,SAACP,GAAD,OAAmBA,EAAMJ,UAAUY,iBAAnC,IAkBIC,EAAO,iDAAG,yGACRC,EAAoB,IAAIC,IAC5B,cACA,CACEC,KAAM,UAERC,KAEIC,EARQ,aAQYd,EAAMc,aARlB,SASUC,YAAsBF,IAAKC,EAAaJ,GATlD,OASRM,EATQ,OAUdnB,EAAamB,GAVC,2CAAH,qDAaPC,EAAU,iDAAG,uGACjBtB,GAAa,IACTH,EAFa,qBAGEI,EAHF,uCAILA,QAJK,IAILA,OAJK,EAILA,EAAWsB,QAAQ1B,GAJd,2DAKLc,EAAiBY,QAAQ1B,GALpB,+BAGT2B,EAHS,KAMVnB,EAAMoB,qBANI,kCAOYC,IAAOC,MAAP,UAAgBC,IAAUC,YAA1B,OAAuCxB,EAAMyB,QAAU,CAC9EC,YAAaP,EAASQ,KAAKC,IAC3B9B,aATW,SAOP+B,EAPO,QAWEC,KAAKA,KAAKD,WACvBzB,EAAS2B,IAAOC,gBAAiB,CAC/BhC,MAAO6B,EAAWC,KAAKA,QAGzBnC,GAAa,GACbO,EAAgB+B,IAAOC,SAAU,CAC/BC,kBAAkB,EAClBC,SAAS,EACTC,QAAS,WApBA,yCAwBUhB,IAAOC,MAAMC,IAAUe,eAAgB,CAC5DZ,YAAaP,EAASQ,KAAKC,MAzBhB,iBA2Bb,QAHQE,EAxBK,EAwBLA,YAGR,IAAIA,KAAMA,KACR1B,EAAS2B,IAAOQ,YAAa,CAC3BvC,MAAK,OAAE8B,QAAF,IAAEA,OAAF,EAAEA,EAAMA,QAGfnC,GAAa,GACbO,EAAgB+B,IAAOC,SAAU,CAC/BC,kBAAkB,EAClBC,SAAS,EACTC,QAAS,WApCA,QAyCjB1C,GAAa,GAzCI,4CAAH,qDA4ChB,OACE,qCACE,sBAAK6C,UAAU,cAAf,UACE,sBAAKA,UAAU,uDAAf,UACE,qBAAIA,UAAU,wDAAd,8BAEE,uBAFF,mCAIA,qBAAKA,UAAU,QAAf,SACE,cAAC,IAAD,CAAaH,QAAQ,WAAWI,WAAS,EAAzC,SACE,cAAC,IAAD,CACEC,MAAOlD,EACPmD,SAAU,SAACnD,GAAD,OAAiBC,EAAOD,EAAxB,EACVoD,UAAW,EACXC,eAAgB,CAAEC,eAAgB,UAClCC,WAtFQ,CACpBC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,cACjBC,WAAY,OACZC,YAAa,OACbC,UAAW,OACXC,aAAc,kBACdC,MAAO,QACPC,SAAU,OACVC,WAAY,OACZC,QAAS,QA4EGC,UAAW,sBAAMC,MAAO,CAAEC,WAAY,mBAK9C,qBAAKC,GAAG,gBACR,sBAAKtB,UAAU,gCAAf,UACE,cAAC,IAAD,CACEuB,QAAStD,EACT+B,UAAU,mEAFZ,2CAKA,cAAC,IAAD,CAAQuB,QAAS9C,EAAYoB,QAAQ,YAAYkB,MAAM,UAAU3C,KAAK,QAAQ6B,WAAS,EAAvF,0BAKJ,cAAC,IAAD,CAAWuB,QAAStE,MAGzB,CAEcuE,cAAMC,KAAK5E,E","file":"static/js/19.14375d1d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { signInWithPhoneNumber, RecaptchaVerifier, ConfirmationResult } from 'firebase/auth';\nimport OtpInput from 'react-otp-input';\nimport { useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\n\n//Material Design\nimport { Button, FormControl } from '@mui/material';\n\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { app, Client } from '../../config';\nimport { SignIn } from '../../common/interface/signIn.interface';\nimport { apiRoutes } from '../../constants/apiRoutes';\nimport routes from '../../constants/routes';\nimport { Errors } from '../../constants/errors';\nimport { AppLoader } from '../../components';\nimport { useDeviceId } from '../../hooks';\n\ninterface IurlState extends SignIn {\n  isPhoneNumberVerified: boolean;\n  userId: string;\n  isForgotPasswordPage: boolean;\n}\ninterface Istate {\n  verifyOtp: {\n    recaptchaVerifier: ConfirmationResult;\n  };\n}\n\nfunction VerifyOtpScreen() {\n  const [otp, setOtp] = useState('');\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const [verifyOtp, setverifyOtp] = useState<ConfirmationResult>();\n\n  // app.settings.appVerificationDisabledForTesting = true;\n\n  const deviceId = useDeviceId();\n\n  const { state } = useLocation() as { state: IurlState };\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const navigate = useNavigate();\n\n  const recaptchaDetails: ConfirmationResult = useSelector(\n    (state: Istate) => state.verifyOtp.recaptchaVerifier\n  );\n\n  /* TODO: Need to change from inline css to scss after demo */\n  const optInputStyle = {\n    width: '30px',\n    height: '50px',\n    backgroundColor: 'transparent',\n    borderLeft: 'none',\n    borderRight: 'none',\n    borderTop: 'none',\n    borderBottom: '1px solid white',\n    color: 'white',\n    fontSize: '36px',\n    fontWeight: 'bold',\n    outline: 'none'\n  };\n\n  const sendOtp = async () => {\n    const reCaptchaVerifier = new RecaptchaVerifier(\n      'request-otp',\n      {\n        size: 'normal'\n      },\n      app\n    );\n    const phoneNumber = `+91${state.phoneNumber}`;\n    const getResult = await signInWithPhoneNumber(app, phoneNumber, reCaptchaVerifier);\n    setverifyOtp(getResult);\n  };\n\n  const confirmOtp = async () => {\n    setIsLoading(true);\n    if (otp) {\n      const verified = verifyOtp\n        ? await verifyOtp?.confirm(otp)\n        : await recaptchaDetails.confirm(otp);\n      if (!state.isForgotPasswordPage) {\n        const isVerified = await Client.patch(`${apiRoutes.verifyUser}${state.userId}`, {\n          firebaseUid: verified.user.uid,\n          deviceId\n        });\n        if (isVerified.data.data.isVerified) {\n          navigate(routes.trustDevicePage, {\n            state: isVerified.data.data\n          });\n        } else {\n          setIsLoading(false);\n          enqueueSnackbar(Errors.appError, {\n            preventDuplicate: false,\n            persist: false,\n            variant: 'error'\n          });\n        }\n      } else {\n        const { data } = await Client.patch(apiRoutes.forgotPassword, {\n          firebaseUid: verified.user.uid\n        });\n        if (data?.data) {\n          navigate(routes.newPassword, {\n            state: data?.data\n          });\n        } else {\n          setIsLoading(false);\n          enqueueSnackbar(Errors.appError, {\n            preventDuplicate: false,\n            persist: false,\n            variant: 'error'\n          });\n        }\n      }\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <>\n      <div className=\"py-50 px-24\">\n        <div className=\"flex-1 d-flex flex-column justify-center text-center\">\n          <h1 className=\"f-28 f-w-700 l-h-normal txt-primary text-center mb-48\">\n            Enter the code we\n            <br /> just texted you ðŸ’¬\n          </h1>\n          <div className=\"px-40\">\n            <FormControl variant=\"outlined\" fullWidth>\n              <OtpInput\n                value={otp}\n                onChange={(otp: string) => setOtp(otp)}\n                numInputs={6}\n                containerStyle={{ justifyContent: 'center' }}\n                inputStyle={optInputStyle}\n                separator={<span style={{ marginLeft: '10px' }} />}\n              />\n            </FormControl>\n          </div>\n        </div>\n        <div id=\"request-otp\"></div>\n        <div className=\"w-100 text-center mb-30 mt-80\">\n          <Button\n            onClick={sendOtp}\n            className=\"d-inline-block f-18 f-w-700 l-h-22 txt-primary text-center mb-24\">\n            I didnâ€™t receive my code\n          </Button>\n          <Button onClick={confirmOtp} variant=\"contained\" color=\"primary\" size=\"large\" fullWidth>\n            Submit\n          </Button>\n        </div>\n      </div>\n      <AppLoader loading={isLoading} />\n    </>\n  );\n}\n\nexport default React.memo(VerifyOtpScreen);\n"],"sourceRoot":""}