{"version":3,"sources":["constants/successMessage.ts","common/enum/subscription.enum.ts","pages/ConfirmPurchase/index.tsx"],"names":["SuccessMessage","WallectConnect","removeCard","PaymentType","Currency","ConfirmPurchase","useState","loading","setLoading","state","useLocation","enqueueSnackbar","useSnackbar","useSelector","userDetails","isLoading","selectedPoints","subscription","useQuery","Client","get","apiRoutes","cardList","data","cardLoading","refetch","cardsList","makePayment","paymentBody","productId","stripeProductId","oneTime","paymentMethod","SUBSCRIPTION","PAYMENT","currency","USD","post","stripeCheckout","response","location","href","message","statusCode","preventDuplicate","persist","variant","cardId","delete","deleteCard","Errors","appError","className","cost","totalAmount","length","map","item","index","isCreditCard","nameOnCard","cardNumber","expiryMonth","expiryYear","Button","onClick","color","size","fullWidth","React","memo"],"mappings":"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","file":"static/js/10.61da1a69.chunk.js","sourcesContent":["export const SuccessMessage = {\n  WallectConnect: 'wallet Connected Successfully',\n  removeCard: 'Card removed Successfully'\n};\n","export enum PaymentType {\n  PAYMENT = 'payment',\n  SUBSCRIPTION = 'subscription'\n}\n\nexport enum Currency {\n  USD = 'usd'\n}\n","import React, { useState } from 'react';\nimport { useLocation, Navigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport { AxiosError } from 'axios';\nimport { useQuery } from 'react-query';\n\n//Material Design\nimport { FormControl, Button } from '@mui/material';\nimport { Input } from '../../components';\n\nimport { AppLoader } from '../../components';\nimport { PoinstPackageList } from '../../common/interface/pointsPackage.interface';\n\nimport { CartHeader, PaymentTerms } from '../../components';\n\n//styles\nimport './style.scss';\nimport { Client } from '../../config';\nimport { apiRoutes } from '../../constants/apiRoutes';\nimport { PaymentType, Currency } from '../../common/enum/subscription.enum';\nimport { CardsDetails } from '../../common/interface/CardsDetails.interface';\nimport { SuccessMessage } from '../../constants/successMessage';\nimport { Errors } from '../../constants/errors';\n\ninterface Istate {\n  selectedPoints: PoinstPackageList;\n  subscription: boolean;\n}\n\ninterface UserDetails {\n  userDetails: UserDetails;\n  isLoading: boolean;\n}\n\ninterface LoggedInUser {\n  userDetails: {\n    userDetails: UserDetails;\n    isLoading: boolean;\n  };\n}\n\nconst ConfirmPurchase = () => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { state } = useLocation();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { isLoading }: UserDetails = useSelector(\n    (state: LoggedInUser) => state?.userDetails\n  );\n\n  const { selectedPoints, subscription } = state as Istate;\n\n  const {\n    data,\n    isLoading: cardLoading,\n    refetch,\n  } = useQuery('cardsList', () => Client.get(apiRoutes.cardList));\n\n  const cardsList: CardsDetails[] = data?.data.data;\n\n  const makePayment = async () => {\n    setLoading(true);\n    const paymentBody = {\n      productId: subscription\n        ? selectedPoints.stripeProductId.subscription\n        : selectedPoints.stripeProductId.oneTime,\n      paymentMethod: subscription\n        ? PaymentType.SUBSCRIPTION\n        : PaymentType.PAYMENT,\n      currency: Currency.USD,\n    };\n    const response = await Client.post(apiRoutes.stripeCheckout, paymentBody);\n    if (response.data) {\n      setLoading(false);\n      // eslint-disable-next-line no-restricted-globals\n      location.href = response.data.data;\n    } else {\n      setLoading(false);\n      const {\n        response: {\n          data: { message, statusCode },\n        },\n      } = response as AxiosError | any;\n\n      enqueueSnackbar(message, {\n        preventDuplicate: false,\n        persist: false,\n        variant: 'error',\n      });\n    }\n  };\n\n  const removeCard = async (cardId: string) => {\n    setLoading(true);\n    try {\n      const { data } = await Client.delete(`${apiRoutes.deleteCard}${cardId}`);\n      if (data.data) {\n        enqueueSnackbar(SuccessMessage.removeCard, {\n          preventDuplicate: false,\n          persist: false,\n          variant: 'error',\n        });\n        refetch();\n      }\n    } catch (err) {\n      enqueueSnackbar(Errors.appError, {\n        preventDuplicate: false,\n        persist: false,\n        variant: 'error',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <div className='my-subscription-content p-24'>\n        <div className='d-flex flex-column justify-between h-100'>\n          <div>\n            <h3 className='f-18 f-w-500 l-h-normal txt-primary text-center mb-24'>\n              Checkout\n            </h3>\n\n            <CartHeader\n              selectedPoints={selectedPoints}\n              subscription={subscription}\n            />\n\n            {/* Subtotal Page Details */}\n            <div className='my-20'>\n              <div className='border-top-light py-16'>\n                <div className='d-flex justify-between'>\n                  <p className='f-16 f-w-400 l-h-normal txt-primary'>\n                    Subtotal\n                  </p>\n                  <p className='f-16 f-w-400 l-h-normal txt-color-primary'>\n                    ${selectedPoints.cost}\n                  </p>\n                </div>\n                <div className='d-flex justify-between mt-10'>\n                  <p className='f-16 f-w-400 l-h-normal txt-primary'>\n                    Processing Fee{' '}\n                    <span className='f-12'>(30 cents + 2.9%)</span>\n                  </p>\n                  <p className='f-16 f-w-400 l-h-normal txt-color-primary'>\n                    $0.51\n                  </p>\n                </div>\n              </div>\n\n              <div className='d-flex justify-between py-12 border-top-light border-bottom-light'>\n                <p className='f-16 f-w-700 l-h-normal txt-primary'>Total</p>\n                <p className='f-16 f-w-400 l-h-normal txt-color-primary'>\n                  ${selectedPoints.totalAmount}\n                </p>\n              </div>\n            </div>\n\n            {/* Card Details */}\n            <div>\n              <p className='f-18 f-w-500 l-h-normal txt-primary'>\n                Payment Details\n              </p>\n              {cardsList?.length ? (\n                <p className='f-14 f-w-400 l-h-normal txt-primary mt-20 mb-16'>\n                  Your Save Card Details\n                </p>\n              ) : (\n                <p className='f-14 f-w-400 l-h-normal txt-primary mt-20 mb-16 text-center'>\n                  Card not found\n                </p>\n              )}\n\n              {cardsList?.map((item, index) => (\n                <div\n                  key={index}\n                  className='d-flex align-center justify-between mb-16'\n                >\n                  <div>\n                    <p className='f-14 f-w-400 l-h-normal txt-tertiary mb-6'>\n                      {item.isCreditCard ? 'Credit Card' : 'Debit Card'}\n                    </p>\n                    <p className='f-14 f-w-400 l-h-normal txt-primary'>\n                      {item.nameOnCard}\n                    </p>\n                    <p className='f-14 f-w-400 l-h-normal txt-primary mt-4'>\n                      .... .... .... {item.cardNumber}\n                    </p>\n                    <p className='f-14 f-w-400 l-h-normal txt-tertiary mt-6'>{`${item.expiryMonth}/${item.expiryYear}`}</p>\n                  </div>\n                  <Button\n                    onClick={() => removeCard(item.cardId)}\n                    variant='contained'\n                    color='primary'\n                    size='small'\n                  >\n                    Remove Card\n                  </Button>\n                </div>\n              ))}\n            </div>\n\n            {/* Add Card Form Section */}\n            {/* <div>\n                <p className=\"f-18 f-w-500 l-h-normal txt-primary\">Payment Details</p>\n\n                <div className=\"mt-24\">\n                  <FormControl variant=\"outlined\" fullWidth className=\"mb-16\">\n                    <label className=\"form-label\">Name On Card</label>\n                    <Input id=\"outlined-adornment-weight\" placeholder=\"Name\" />\n                  </FormControl>\n                  <div className=\"d-flex c-g-20\">\n                    <FormControl variant=\"outlined\" fullWidth className=\"flex-2 mb-16\">\n                      <label className=\"form-label\">Card Number</label>\n                      <Input id=\"outlined-adornment-weight\" placeholder=\"000-000-000-000\" />\n                    </FormControl>\n                    <FormControl variant=\"outlined\" fullWidth className=\"flex-1 mb-16\">\n                      <label className=\"form-label\">CVC</label>\n                      <Input id=\"outlined-adornment-weight\" placeholder=\"123\" />\n                    </FormControl>\n                  </div>\n                  <div className=\"d-flex c-g-20\">\n                    <FormControl variant=\"outlined\" fullWidth className=\"mb-16\">\n                      <label className=\"form-label\">Expiration Date</label>\n                      <Input id=\"outlined-adornment-weight\" placeholder=\"MM / DD\" />\n                    </FormControl>\n                    <FormControl variant=\"outlined\" fullWidth className=\"mb-16\">\n                      <label className=\"form-label\">Postal Code</label>\n                      <Input id=\"outlined-adornment-weight\" placeholder=\"123\" />\n                    </FormControl>\n                  </div>\n                </div>\n              </div> */}\n\n            <PaymentTerms />\n          </div>\n          <div className='pb-24'>\n            {/* Add card payments */}\n            <Button\n              onClick={makePayment}\n              variant='contained'\n              color='secondary'\n              size='large'\n              fullWidth\n            >\n              Confirm Purchase\n            </Button>\n          </div>\n        </div>\n      </div>\n      <AppLoader loading={isLoading || loading || cardLoading} />\n    </>\n  );\n};\n\nexport default React.memo(ConfirmPurchase);\n"],"sourceRoot":""}