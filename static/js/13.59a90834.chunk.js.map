{"version":3,"sources":["../node_modules/@mui/icons-material/ArrowBack.js","pages/NewPassword/index.tsx"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","NewPasswordPage","useState","isPasswordVisible","isConfirmPasswordVisible","passwordVisibility","setPasswordVisibility","enqueueSnackbar","useSnackbar","state","useLocation","navigate","useNavigate","isSamePassword","useRef","useForm","defaultValues","password","confirmPassword","register","handleSubmit","control","errors","formState","watch","changePasswordVisibility","preState","changeConfirmPasswordVisibility","current","changePassword","passwords","Client","patch","apiRoutes","resetPassword","challengeToken","token","data","routes","congratulationPage","Errors","appError","preventDuplicate","persist","variant","className","onSubmit","name","render","fullWidth","id","placeholder","type","endAdornment","position","onClick","required","message","validate","color","size","React","memo"],"mappings":"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","file":"static/js/13.59a90834.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');\nexports.default = _default;","import React, { useState, useRef } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\n\n//Material Design\nimport { Button, FormControl, InputAdornment, IconButton } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\nimport { Input } from '../../components';\nimport { Client } from '../../config';\nimport { apiRoutes } from '../../constants/apiRoutes';\nimport { routes } from '../../constants/routes';\nimport { Errors } from '../../constants/errors';\n\ninterface PasswordCredentials {\n  password: string;\n  confirmPassword: string;\n}\n\ninterface Istate {\n  challengeToken: {\n    expiresIn: number;\n    token: string;\n  };\n}\n\nfunction NewPasswordPage() {\n  const [passwordVisibility, setPasswordVisibility] = useState({\n    isPasswordVisible: false,\n    isConfirmPasswordVisible: false\n  });\n\n  const { enqueueSnackbar } = useSnackbar();\n  const { state } = useLocation() as { state: Istate };\n  const navigate = useNavigate();\n  const isSamePassword = useRef({});\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n    watch\n  } = useForm<PasswordCredentials>({\n    defaultValues: {\n      password: '',\n      confirmPassword: ''\n    }\n  });\n\n  const changePasswordVisibility = () => {\n    setPasswordVisibility((preState) => ({\n      ...preState,\n      isPasswordVisible: !preState.isPasswordVisible\n    }));\n  };\n\n  const changeConfirmPasswordVisibility = () => {\n    setPasswordVisibility((preState) => ({\n      ...preState,\n      isConfirmPasswordVisible: !preState.isConfirmPasswordVisible\n    }));\n  };\n\n  isSamePassword.current = watch('password', '');\n  const changePassword = async (passwords: PasswordCredentials) => {\n    const { data } = await Client.patch(apiRoutes.resetPassword, {\n      challengeToken: state.challengeToken.token,\n      password: passwords.confirmPassword\n    });\n    if (data) {\n      navigate(routes.congratulationPage);\n    } else {\n      enqueueSnackbar(Errors.appError, {\n        preventDuplicate: false,\n        persist: false,\n        variant: 'error'\n      });\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"app-layout\">\n        <div className=\"forgot-password-page\">\n          <div className=\"pt-32 px-12\">\n            <IconButton aria-label=\"delete\">\n              <ArrowBackIcon className=\"txt-primary\" />\n            </IconButton>\n          </div>\n          <div className=\"p-24\">\n            <form onSubmit={handleSubmit((data) => changePassword(data))}>\n              <div className=\"flex-1 d-flex flex-column align-center h-100\">\n                <h1 className=\"f-28 f-w-700 l-h-normal txt-primary text-center mb-16 mw-200\">\n                  Enter a new password\n                </h1>\n                <div className=\"w-100\">\n                  <Controller\n                    name=\"password\"\n                    control={control}\n                    render={() => (\n                      <FormControl variant=\"outlined\" fullWidth>\n                        <label className=\"form-label\">Password</label>\n                        <Input\n                          id=\"outlined-adornment-weight\"\n                          placeholder=\"***********\"\n                          type={passwordVisibility.isPasswordVisible ? 'text' : 'password'}\n                          endAdornment={\n                            <InputAdornment position=\"end\">\n                              <IconButton onClick={changePasswordVisibility}>\n                                {passwordVisibility.isPasswordVisible ? (\n                                  <Visibility />\n                                ) : (\n                                  <VisibilityOff />\n                                )}\n                              </IconButton>\n                            </InputAdornment>\n                          }\n                          {...register('password', {\n                            required: 'Please enter a password'\n                          })}\n                        />\n                        <p className=\"w-100 txt-error mt-10 f-w-600\">{errors?.password?.message}</p>\n                      </FormControl>\n                    )}\n                  />\n                  <Controller\n                    name=\"confirmPassword\"\n                    control={control}\n                    render={() => (\n                      <FormControl variant=\"outlined\" fullWidth>\n                        <label className=\"form-label\">Confirm Password</label>\n                        <Input\n                          id=\"outlined-adornment-weight\"\n                          placeholder=\"***********\"\n                          type={passwordVisibility.isConfirmPasswordVisible ? 'text' : 'password'}\n                          endAdornment={\n                            <InputAdornment position=\"end\">\n                              <IconButton onClick={changeConfirmPasswordVisibility}>\n                                {passwordVisibility.isConfirmPasswordVisible ? (\n                                  <Visibility />\n                                ) : (\n                                  <VisibilityOff />\n                                )}\n                              </IconButton>\n                            </InputAdornment>\n                          }\n                          {...register('confirmPassword', {\n                            required: 'Please enter a confirm password',\n                            validate: (value: string) =>\n                              value === isSamePassword.current || 'The passwords do not match'\n                          })}\n                        />\n                        <p className=\"w-100 txt-error mt-10 f-w-600\">\n                          {errors?.confirmPassword?.message}\n                        </p>\n                      </FormControl>\n                    )}\n                  />\n                </div>\n              </div>\n              <div className=\"w-100 text-center relative index-1 mb-24 mt-32\">\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\" fullWidth>\n                  Update Password\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(NewPasswordPage);\n"],"sourceRoot":""}