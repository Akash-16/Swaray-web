{"version":3,"sources":["pages/VerifyOTPScreen/index.tsx"],"names":["VerifyOtpScreen","useState","otp","setOtp","isLoading","setIsLoading","verifyOtp","setverifyOtp","deviceId","useDeviceId","state","useLocation","enqueueSnackbar","useSnackbar","navigate","useNavigate","recaptchaDetails","useSelector","recaptchaVerifier","sendOtp","reCaptchaVerifier","RecaptchaVerifier","size","app","phoneNumber","signInWithPhoneNumber","getResult","confirmOtp","confirm","verified","isForgotPasswordPage","Client","patch","apiRoutes","verifyUser","userId","firebaseUid","user","uid","isVerified","data","routes","trustDevicePage","Errors","appError","preventDuplicate","persist","variant","forgotPassword","newPassword","className","fullWidth","value","onChange","numInputs","containerStyle","justifyContent","inputStyle","width","height","backgroundColor","borderLeft","borderRight","borderTop","borderBottom","color","fontSize","fontWeight","outline","separator","style","marginLeft","id","onClick","loading","React","memo"],"mappings":"oSAiCA,SAASA,IACP,MAAsBC,mBAAS,IAAG,mBAA3BC,EAAG,KAAEC,EAAM,KAElB,EAAkCF,oBAAkB,GAAM,mBAAnDG,EAAS,KAAEC,EAAY,KAE9B,EAAkCJ,qBAA8B,mBAAzDK,EAAS,KAAEC,EAAY,KAIxBC,EAAWC,cAETC,EAAUC,cAAVD,MAEAE,EAAoBC,cAApBD,gBAEFE,EAAWC,cAEXC,EAAuCC,aAC3C,SAACP,GAAa,OAAKA,EAAMJ,UAAUY,iBAAiB,IAkBhDC,EAAO,iDAAG,kGAQ6B,OAPrCC,EAAoB,IAAIC,IAC5B,cACA,CACEC,KAAM,UAERC,KAEIC,EAAW,aAASd,EAAMc,aAAW,SACnBC,YACtBF,IACAC,EACAJ,GACA,KAAD,EAJKM,EAAS,OAKfnB,EAAamB,GAAW,2CACzB,kBAfY,mCAiBPC,EAAU,iDAAG,oGACE,GAAnBtB,GAAa,IACTH,EAAI,CAAD,oBACYI,EAAS,gCACP,OAATA,QAAS,IAATA,OAAS,EAATA,EAAWsB,QAAQ1B,GAAI,2DACvBc,EAAiBY,QAAQ1B,GAAK,KAAD,uBAFzB,GAAR2B,EAAQ,KAGTnB,EAAMoB,qBAAqB,CAAD,iCACJC,IAAOC,MAAM,GAAD,OAChCC,IAAUC,YAAU,OAAGxB,EAAMyB,QAChC,CACEC,YAAaP,EAASQ,KAAKC,IAC3B9B,aAEF,KAAD,IANK+B,EAAU,QAODC,KAAKA,KAAKD,WACvBzB,EAAS2B,IAAOC,gBAAiB,CAC/BhC,MAAO6B,EAAWC,KAAKA,QAGzBnC,GAAa,GACbO,EAAgB+B,IAAOC,SAAU,CAC/BC,kBAAkB,EAClBC,SAAS,EACTC,QAAS,WAEZ,yCAEsBhB,IAAOC,MAAMC,IAAUe,eAAgB,CAC5DZ,YAAaP,EAASQ,KAAKC,MAC1B,KAAD,YACM,QAHAE,EAAI,EAAJA,YAGA,IAAJA,KAAMA,KACR1B,EAAS2B,IAAOQ,YAAa,CAC3BvC,MAAW,OAAJ8B,QAAI,IAAJA,OAAI,EAAJA,EAAMA,QAGfnC,GAAa,GACbO,EAAgB+B,IAAOC,SAAU,CAC/BC,kBAAkB,EAClBC,SAAS,EACTC,QAAS,WAEZ,QAGL1C,GAAa,GAAO,4CACrB,kBA7Ce,mCA+ChB,OACE,qCACE,sBAAK6C,UAAU,cAAa,UAC1B,sBAAKA,UAAU,uDAAsD,UACnE,qBAAIA,UAAU,wDAAuD,UAAC,oBAEpE,uBAAM,mCAER,qBAAKA,UAAU,QAAO,SACpB,cAAC,IAAW,CAACH,QAAQ,WAAWI,WAAS,WACvC,cAAC,IAAQ,CACPC,MAAOlD,EACPmD,SAAU,SAACnD,GAAW,OAAKC,EAAOD,EAAI,EACtCoD,UAAW,EACXC,eAAgB,CAAEC,eAAgB,UAClCC,WA7FQ,CACpBC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,cACjBC,WAAY,OACZC,YAAa,OACbC,UAAW,OACXC,aAAc,kBACdC,MAAO,QACPC,SAAU,OACVC,WAAY,OACZC,QAAS,QAmFGC,UAAW,sBAAMC,MAAO,CAAEC,WAAY,mBAK9C,qBAAKC,GAAG,gBACR,sBAAKtB,UAAU,gCAA+B,UAC5C,cAAC,IAAM,CACLuB,QAAStD,EACT+B,UAAU,mEAAkE,SAC7E,kCAGD,cAAC,IAAM,CACLuB,QAAS9C,EACToB,QAAQ,YACRkB,MAAM,UACN3C,KAAK,QACL6B,WAAS,WACV,iBAKL,cAAC,IAAS,CAACuB,QAAStE,MAG1B,CAEeuE,cAAMC,KAAK5E,E","file":"static/js/19.953124b1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  signInWithPhoneNumber,\n  RecaptchaVerifier,\n  ConfirmationResult,\n} from 'firebase/auth';\nimport OtpInput from 'react-otp-input-rc-17';\nimport { useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\n\n//Material Design\nimport { Button, FormControl } from '@mui/material';\n\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { app, Client } from '../../config';\nimport { SignIn } from '../../common/interface/signIn.interface';\nimport { apiRoutes } from '../../constants/apiRoutes';\nimport routes from '../../constants/routes';\nimport { Errors } from '../../constants/errors';\nimport { AppLoader } from '../../components';\nimport { useDeviceId } from '../../hooks';\n\ninterface IurlState extends SignIn {\n  isPhoneNumberVerified: boolean;\n  userId: string;\n  isForgotPasswordPage: boolean;\n}\ninterface Istate {\n  verifyOtp: {\n    recaptchaVerifier: ConfirmationResult;\n  };\n}\n\nfunction VerifyOtpScreen() {\n  const [otp, setOtp] = useState('');\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const [verifyOtp, setverifyOtp] = useState<ConfirmationResult>();\n\n  // app.settings.appVerificationDisabledForTesting = true;\n\n  const deviceId = useDeviceId();\n\n  const { state } = useLocation() as { state: IurlState };\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const navigate = useNavigate();\n\n  const recaptchaDetails: ConfirmationResult = useSelector(\n    (state: Istate) => state.verifyOtp.recaptchaVerifier\n  );\n\n  /* TODO: Need to change from inline css to scss after demo */\n  const optInputStyle = {\n    width: '30px',\n    height: '50px',\n    backgroundColor: 'transparent',\n    borderLeft: 'none',\n    borderRight: 'none',\n    borderTop: 'none',\n    borderBottom: '1px solid white',\n    color: 'white',\n    fontSize: '36px',\n    fontWeight: 'bold',\n    outline: 'none',\n  };\n\n  const sendOtp = async () => {\n    const reCaptchaVerifier = new RecaptchaVerifier(\n      'request-otp',\n      {\n        size: 'normal',\n      },\n      app\n    );\n    const phoneNumber = `+91${state.phoneNumber}`;\n    const getResult = await signInWithPhoneNumber(\n      app,\n      phoneNumber,\n      reCaptchaVerifier\n    );\n    setverifyOtp(getResult);\n  };\n\n  const confirmOtp = async () => {\n    setIsLoading(true);\n    if (otp) {\n      const verified = verifyOtp\n        ? await verifyOtp?.confirm(otp)\n        : await recaptchaDetails.confirm(otp);\n      if (!state.isForgotPasswordPage) {\n        const isVerified = await Client.patch(\n          `${apiRoutes.verifyUser}${state.userId}`,\n          {\n            firebaseUid: verified.user.uid,\n            deviceId,\n          }\n        );\n        if (isVerified.data.data.isVerified) {\n          navigate(routes.trustDevicePage, {\n            state: isVerified.data.data,\n          });\n        } else {\n          setIsLoading(false);\n          enqueueSnackbar(Errors.appError, {\n            preventDuplicate: false,\n            persist: false,\n            variant: 'error',\n          });\n        }\n      } else {\n        const { data } = await Client.patch(apiRoutes.forgotPassword, {\n          firebaseUid: verified.user.uid,\n        });\n        if (data?.data) {\n          navigate(routes.newPassword, {\n            state: data?.data,\n          });\n        } else {\n          setIsLoading(false);\n          enqueueSnackbar(Errors.appError, {\n            preventDuplicate: false,\n            persist: false,\n            variant: 'error',\n          });\n        }\n      }\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <>\n      <div className='py-50 px-24'>\n        <div className='flex-1 d-flex flex-column justify-center text-center'>\n          <h1 className='f-28 f-w-700 l-h-normal txt-primary text-center mb-48'>\n            Enter the code we\n            <br /> just texted you ðŸ’¬\n          </h1>\n          <div className='px-40'>\n            <FormControl variant='outlined' fullWidth>\n              <OtpInput\n                value={otp}\n                onChange={(otp: string) => setOtp(otp)}\n                numInputs={6}\n                containerStyle={{ justifyContent: 'center' }}\n                inputStyle={optInputStyle}\n                separator={<span style={{ marginLeft: '10px' }} />}\n              />\n            </FormControl>\n          </div>\n        </div>\n        <div id='request-otp'></div>\n        <div className='w-100 text-center mb-30 mt-80'>\n          <Button\n            onClick={sendOtp}\n            className='d-inline-block f-18 f-w-700 l-h-22 txt-primary text-center mb-24'\n          >\n            I didnâ€™t receive my code\n          </Button>\n          <Button\n            onClick={confirmOtp}\n            variant='contained'\n            color='primary'\n            size='large'\n            fullWidth\n          >\n            Submit\n          </Button>\n        </div>\n      </div>\n      <AppLoader loading={isLoading} />\n    </>\n  );\n}\n\nexport default React.memo(VerifyOtpScreen);\n"],"sourceRoot":""}